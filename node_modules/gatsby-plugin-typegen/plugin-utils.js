"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.GRAPHQL_TAG_PLUCK_OPTIONS = exports.requirePluginOptions = void 0;

var _path = _interopRequireDefault(require("path"));

var _common = require("./common");

var _gatsbyUtils = require("./gatsby-utils");

// No parsing by default, save introspection result file as json format.
const DEFAULT_SCHEMA_OUTPUT_OPTION = {
  format: 'introspection',
  commentDescriptions: true
};

const requirePluginOptions = (options, {
  store,
  reporter
}) => {
  const {
    program
  } = store.getState();
  const basePath = program.directory; // There are no required properties (yet), so must be compatible.

  const pluginOptions = options;
  const {
    language = 'typescript',
    namespace = 'GatsbyTypes',
    emitSchema: emitSchemaOptionMap = {},
    includeResolvers = false,
    autoFix = true,
    emitPluginDocuments = {},
    schemaOutputPath,
    typeDefsOutputPath,
    scalars = {}
  } = pluginOptions;
  const emitSchema = {};

  for (const [key, options] of Object.entries(emitSchemaOptionMap)) {
    if (options === true) {
      emitSchema[key] = { ...DEFAULT_SCHEMA_OUTPUT_OPTION,
        // Infer format option based on filename.
        format: /\.(gql|graphql)$/.test(key) ? 'sdl' : 'introspection'
      };
    }
  }

  if (schemaOutputPath) {
    reporter.warn('`schemaOutputPath` was deprecated, please use `emitSchema` instead.');
    emitSchema[schemaOutputPath] = DEFAULT_SCHEMA_OUTPUT_OPTION;
  }

  if (typeDefsOutputPath) {
    reporter.warn('`typeDefsOutputPath` was deprecated, please use `outputPath` instead.');
  }

  const outputPath = pluginOptions.outputPath || typeDefsOutputPath || (language === 'typescript' ? _path.default.resolve(basePath, 'src/__generated__/gatsby-types.ts') : _path.default.resolve(basePath, 'src/__generated__/gatsby-types.js'));

  if (language === 'typescript' !== /\.tsx?$/.test(outputPath)) {
    reporter.warn(reporter.stripIndent(`The language you specified is not match to file extension.
        - language: ${(0, _common.formatLanguage)(language)}
        - outputPath: ${outputPath}
      `));
  }

  for (const type of _gatsbyUtils.gatsbyInternalScalars) {
    if (scalars[type]) {
      reporter.warn(`[typegen] You couldn't override type for \`${type}\` scalar because it is reserved by Gatsby internal.`);
      delete scalars[type];
    }
  }

  return {
    language,
    namespace,
    outputPath,
    includeResolvers,
    autoFix,
    emitSchema,
    emitPluginDocuments,
    scalars
  };
};

exports.requirePluginOptions = requirePluginOptions;
const GRAPHQL_TAG_PLUCK_OPTIONS = {
  modules: [// Allow only GatsbyJS
  {
    name: 'gatsby',
    identifier: 'graphql'
  }]
};
exports.GRAPHQL_TAG_PLUCK_OPTIONS = GRAPHQL_TAG_PLUCK_OPTIONS;