/**
 * Any object that can be called
 */
export interface Callable {
    (...args: any[]): any;
}
/**
 * JavaScript's primitive types
 */
export declare type Primitive = (null | undefined | boolean | string | number | bigint | symbol);
/**
 * Alternative to `any`
 *
 * Helpful when need `any` as value type but should be inferred more precisely
 */
export declare type InferrableAny = Primitive | object;
export declare type NonMaybeType = {};
/**
 * Safely intersect prop types
 */
export declare type OverrideProps<TBaseProps, TNewProps> = Omit<TBaseProps, keyof TNewProps> & TNewProps;
/**
 * Well-known `U<T>`-like nominal types
 */
export declare type BoxType<T = any> = (Promise<T> | Array<T> | Set<T>);
/**
 * Unwrap BoxType<T>.
 */
export declare type Unwrap<T> = (T extends Promise<infer U> ? U : T extends Array<infer U> ? U : T extends Set<infer U> ? U : T);
/**
 * Wrap T by BoxType.
 */
export declare type Wrap<T, Box extends BoxType> = (Box extends Promise<any> ? Promise<T> : Box extends Array<any> ? Array<T> : Box extends Set<any> ? Set<T> : never);
