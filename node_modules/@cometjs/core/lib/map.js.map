{"version":3,"sources":["../src/map.ts"],"names":["mapToValue","map","arg"],"mappings":";;;;;;;AA8BO,SAASA,UAAT,CAAkCC,GAAlC,EAAkEC,GAAlE,EAAsF;AAC3F,MAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;AAC7B,WAAQA,GAAD,CAAkBC,GAAlB,CAAP;AACD;;AACD,SAAOD,GAAP;AACD","sourcesContent":["import type { Callable } from './common';\n\n// Force-infer mapped return type of callable properties\nexport type MapReturnType<TMap extends object> = (\n  keyof TMap extends infer TKey\n  ? TKey extends NonNullable<keyof TMap>\n  ? TMap[TKey] extends infer TMatch\n  ? TMatch extends Callable\n  ? ReturnType<TMatch>\n  : TMatch // Use as-is if it's not a callable\n  : never\n  : never\n  : never\n);\n\n/**\n * Map function to value or just value.\n */\ntype MapFunction<TValue, TArg> = (\n  | TValue\n  | ((arg: TArg) => TValue)\n);\n\n/**\n * Call map function to value or just value.\n *\n * @param map A map function to value or just value.\n * @param arg A argument to pass to map function.\\\n * It will be dropped if map is not a function.\n */\nexport function mapToValue<TValue, TArg>(map: MapFunction<TValue, TArg>, arg?: TArg): TValue {\n  if (typeof map === 'function') {\n    return (map as Callable)(arg);\n  }\n  return map;\n}\n"],"file":"map.js"}