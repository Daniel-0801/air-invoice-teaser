(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['@cometjs/core'] = {}));
}(this, (function (exports) { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function mapToValue(map, arg) {
    if (typeof map === 'function') {
      return map(arg);
    }

    return map;
  }

  function isSome(option) {
    return option != null;
  }
  function isNone(option) {
    return option == null;
  }
  function optionToString(option) {
    return isSome(option) ? "Some(".concat(_typeof(option), ")") : 'None';
  }
  function matchOption(option) {
    return isSome(option) ? 'some' : 'none';
  }
  function mapOption(option, map) {
    if (typeof map === 'function') {
      return isSome(option) ? map(option) : null;
    }

    if (_typeof(map) !== 'object') {
      throw new Error("The second argument only allows function or object but got: ".concat(_typeof(map)));
    }

    var matchedMap = map[matchOption(option)];

    if (!matchedMap) {
      throw new Error("The object doesn't have map to ".concat(optionToString(option), " type"));
    }

    return isSome(option) ? mapToValue(matchedMap, option) : mapToValue(matchedMap);
  }

  function isTruthy(condition) {
    return Boolean(condition);
  }
  function isFalsy(condition) {
    return !Boolean(condition);
  }

  exports.isFalsy = isFalsy;
  exports.isNone = isNone;
  exports.isSome = isSome;
  exports.isTruthy = isTruthy;
  exports.mapOption = mapOption;
  exports.mapToValue = mapToValue;
  exports.matchOption = matchOption;
  exports.optionToString = optionToString;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.umd.js.map
