import { mapToValue } from './map';
export function isSome(option) {
  return option != null;
}
export function isNone(option) {
  return option == null;
}
export function optionToString(option) {
  return isSome(option) ? `Some(${typeof option})` : 'None';
}
export function matchOption(option) {
  return isSome(option) ? 'some' : 'none';
}
export function mapOption(option, map) {
  if (typeof map === 'function') {
    return isSome(option) ? map(option) : null;
  }

  if (typeof map !== 'object') {
    throw new Error(`The second argument only allows function or object but got: ${typeof map}`);
  }

  const matchedMap = map[matchOption(option)];

  if (!matchedMap) {
    throw new Error(`The object doesn't have map to ${optionToString(option)} type`);
  }

  return isSome(option) ? mapToValue(matchedMap, option) : mapToValue(matchedMap);
}
//# sourceMappingURL=option.mjs.map